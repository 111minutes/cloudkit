require File.join(File.dirname(__FILE__), "test_generator_helper.rb")

class TestCloudkitGenerator < Test::Unit::TestCase
  include RubiGen::GeneratorTestHelper

  def setup
    bare_setup
  end
  
  def teardown
    bare_teardown
  end
  
  # Some generator-related assertions:
  #   assert_generated_file(name, &block) # block passed the file contents
  #   assert_directory_exists(name)
  #   assert_generated_class(name, &block)
  #   assert_generated_module(name, &block)
  #   assert_generated_test_for(name, &block)
  # The assert_generated_(class|module|test_for) &block is passed the body of the class/module within the file
  #   assert_has_method(body, *methods) # check that the body has a list of methods (methods with parentheses not supported yet)
  #
  # Other helper methods are:
  #   app_root_files - put this in teardown to show files generated by the test method (e.g. p app_root_files)
  #   bare_setup - place this in setup method to create the APP_ROOT folder for each test
  #   bare_teardown - place this in teardown method to destroy the TMP_ROOT or APP_ROOT folder after each test
  
  def test_generator_without_options
    run_generator('cloudkit', [APP_ROOT], sources)
    
    %w(clients db/migrate public/js public/css public/images resources views).each do |d|
      assert_directory_exists d
    end
    
    %w(app.rb config.ru Rakefile README db/config.yml db/migrate/001_create_schema.rb resources.rb views/layout.erb views/new_session.erb views/oauth_auth.erb views/oauth_auth_failure.erb views/oauth_auth_success.erb views/oauth_clients_edit.erb views/oauth_clients_index.erb views/oauth_clients_new.erb views/oauth_clients_show.erb views/ui.erb).each do |f|
      assert_generated_file f
    end
  end
  
  private
  def sources
    [RubiGen::PathSource.new(:test, File.join(File.dirname(__FILE__),"..", generator_path))]
  end
  
  def generator_path
    "app_generators"
  end
end
